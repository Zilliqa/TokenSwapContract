scilla_version 0

import IntUtils

library XcadTokenSwap

let uint128_zero = Uint128 0
let uint128_ten = Uint128 10
let bool_active = True
let bool_inactive = False

let one_msg =
  fun (m : Message) =>
    let e = Nil {Message} in
      Cons {Message} m e

type Error =
| ContractPaused
| AdminValidationFailed
| StagingAdminValidationFailed
| StagingAdminNotExist
| ContractNotPaused

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | ContractPaused              => Int32 -1
      | AdminValidationFailed       => Int32 -2
      | StagingAdminValidationFailed => Int32 -3
      | StagingAdminNotExist        => Int32 -4
      | ContractNotPaused           => Int32 -5
      end
    in
    { _exception : "Error"; code : result_code }

let uint128_to_uint256 : Uint128 -> Uint256 =
  fun (x : Uint128) =>
    let ox256 = builtin to_uint256 x in
      match ox256 with
      | None =>
        (* this never happens, hence we throw a division by zero exception just in case *)
        let zero = Uint256 0 in
        builtin div zero zero
      | Some x256 => x256
      end

(* Compute "(x * y) / z" with protection against integer overflows *)
let muldiv : Uint128 -> Uint128 -> Uint128 -> Uint128 =
    fun (x : Uint128) =>
    fun (y : Uint128) =>
    fun (z : Uint128) =>
      let x256 = uint128_to_uint256 x in
      let y256 = uint128_to_uint256 y in
      let z256 = uint128_to_uint256 z in
      let x_mul_y256 = builtin mul x256 y256 in
      let res256 = builtin div x_mul_y256 z256 in
      let ores128 = builtin to_uint128 res256 in
      match ores128 with
      | None =>
        (* this must never happen, hence we throw an integer overflow exception *)
        let max_uint128 = Uint128 340282366920938463463374607431768211455 in
        let fourtytwo128 = Uint128 42 in
        builtin mul max_uint128 fourtytwo128
      | Some res128 =>
        res128
      end

(* Just for XcadTokenSwap *)
(* init_decimals_from is 10 ** 6 which is on zilliqa side *)
(* init_decimals_to is 10 ** 18 which is on ethereum side *)
(* means bridged token decimals is also 10 ** 18 *)
contract XcadTokenSwap(
  init_admin: ByStr20,
  init_zrc_from: ByStr20,
  init_decimals_from: Uint32,
  init_zrc_to: ByStr20,
  init_decimals_to: Uint32
)
with
  let ok = uint32_le init_decimals_from init_decimals_to in
    match ok with
    | True =>
      True
    | False =>
      False
    end
=>
  

field contractadmin: ByStr20  = init_admin
field stagingcontractadmin: Option ByStr20 = None {ByStr20}
field paused: Bool = True

(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsAdmin(initiator: ByStr20)
  contractadmin_tmp <- contractadmin;
  is_admin = builtin eq initiator contractadmin_tmp;
  match is_admin with
  | True  =>
  | False =>
    e = AdminValidationFailed;
    ThrowError e
  end
end

procedure IsNotPaused()
  paused_tmp <- paused;
  match paused_tmp with
  | False =>
  | True  =>
    e = ContractPaused;
    ThrowError e
  end
end

procedure IsPaused()
  paused_tmp <- paused;
  match paused_tmp with
  | False =>
    e = ContractNotPaused;
    ThrowError e
  | True  =>
  end
end

procedure TransferZRC2ToContract(assetHash: ByStr20, amount: Uint128)
  msg_to_zrc2 = {_tag: "TransferFrom"; _recipient: assetHash; _amount: uint128_zero; 
                  from: _sender; to: _this_address; amount: amount};
  msgs = one_msg msg_to_zrc2;
  send msgs;
  e = { _eventname: "TransferToContract"; assetHash: assetHash; amount: amount };
  event e
end

procedure TransferZRC2FromContract(toAssetHash: ByStr20, address: ByStr20, amount: Uint128)
  msg_to_zrc2 = {_tag: "Transfer"; _recipient: toAssetHash; _amount: uint128_zero; 
                 to: address; amount: amount};
  msgs = one_msg msg_to_zrc2;
  send msgs
end


(***************************************************)
(*                  Transition                     *)
(***************************************************)

(* @dev: Start a proposal for new contract admin. Used by admin only. *)
(* @param newAdmin: New admin value *)
transition UpdateAdmin(newAdmin: ByStr20)
  IsAdmin _sender;
  staging_admin = Some {ByStr20} newAdmin;
  stagingcontractadmin := staging_admin
end

(* @dev: Claim to be the new admin of contract. *)
transition ClaimAdmin()
  staging_admin <- stagingcontractadmin;
  match staging_admin with
  | Some admin =>
    is_valid = builtin eq _sender admin;
    match is_valid with
    | True =>
      contractadmin := admin;
      staging_admin = None {ByStr20};
      stagingcontractadmin := staging_admin;
      e = { _eventname: "ClaimAdmin"; new_admin: admin };
      event e
    | False =>
      e = StagingAdminValidationFailed;
      ThrowError e
    end
  | None =>
    e = StagingAdminNotExist;
    ThrowError e
  end
end

(* @dev: pause the contract. Used by admin only.               *)
transition Pause()
  IsAdmin _sender;
  paused := bool_active
end

(* @dev: unpause/unfreeze the contract. Used by admin only.    *)
transition UnPause()
  IsAdmin _sender;
  paused := bool_inactive
end

(* @param amount0: ExistingZRC2 *)
transition ExistingZRC2ToBridgedZRC2(amount_from: Uint128)
  IsNotPaused;
  (* transfer existing zrc2 to this contract*)
  TransferZRC2ToContract init_zrc_from amount_from;
  (* transfer bridged zrc2 to sender*)
  (* amount_from / factor_from * factor_to *)
  factor_from = builtin pow uint128_ten init_decimals_from;
  factor_to = builtin pow uint128_ten init_decimals_to;
  to_amount = muldiv amount_from factor_to factor_from;
  TransferZRC2FromContract init_zrc_to _sender to_amount
end

transition TransferSuccessCallBack(sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

transition RecipientAcceptTransfer(sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

transition RecipientAcceptTransferFrom(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end